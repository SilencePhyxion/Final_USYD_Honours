import os
import pandas as pd
import numpy as np
import radvel

# Define global planetary system and dataset parameters
starname = 'KOI6194'
nplanets = 3    # number of planets in the system
instnames = ['hires_j']    # list of instrument names. Can be whatever you like (no spaces) but should match 'tel' column in the input file.
ntels = len(instnames)       # number of instruments with unique velocity zero-points
fitting_basis = 'per tc secosw sesinw logk'    # Fitting basis, see radvel.basis.BASIS_NAMES for available basis names
bjd0 = 2454833  # reference epoch for RV timestamps (i.e. this number has been subtracted off your timestamps)
planet_letters = {1: 'b', 2: 'c', 3: 'd'}   # map the numbers in the Parameters keys to planet letters (for plotting and tables)
## use the pkl file generated by rvsearch when doing blind search

# Define prior centers (initial guesses) in a basis of your choice (need not be in the fitting basis)
anybasis_params = radvel.Parameters(nplanets,basis='per tc e w k', planet_letters=planet_letters)    # initialize Parameters object

anybasis_params['per1'] = radvel.Parameter(value=42.2960)      # period of 1st planet
anybasis_params['tc1'] = radvel.Parameter(value=2458350)     # time of inferior conjunction of 1st planet
anybasis_params['e1'] = radvel.Parameter(value=0.16 ) #e = 0.16         # eccentricity of 1st planet
anybasis_params['w1'] = radvel.Parameter(value=np.pi/2.)      # argument of periastron of the star's orbit for 1st planet
# anybasis_params['sesinw1'] = radvel.Parameter(value=0.00)
anybasis_params['k1'] = radvel.Parameter(value=38.925)          # velocity semi-amplitude for 1st planet
anybasis_params['per2'] = radvel.Parameter(value=63.38)      # same parameters for 2nd planet ...
anybasis_params['tc2'] = radvel.Parameter(value=2458216)
anybasis_params['e2'] = radvel.Parameter(value=0.28) #e = 0.28
# anybasis_params['sesinw2'] = radvel.Parameter(value=0.00)
anybasis_params['w2'] = radvel.Parameter(value=np.pi/2.)
anybasis_params['k2'] = radvel.Parameter(value=40.509)
anybasis_params['per3'] = radvel.Parameter(value=431.7)      # same parameters for 3rd planet ...
anybasis_params['tc3'] = radvel.Parameter(value=2458437)
anybasis_params['e3'] = radvel.Parameter(value=0.07) #e = 0.07
# anybasis_params['sesinw3'] = radvel.Parameter(value=0.00)
anybasis_params['w3'] = radvel.Parameter(value=np.pi/2.)
anybasis_params['k3'] = radvel.Parameter(value=27.85)

time_base = 2458000     # abscissa for slope and curvature terms (should be near mid-point of time baseline)
anybasis_params['dvdt'] = radvel.Parameter(value=0.0) # slope of rv trend (i.e. \dot{\gamma}): (If rv is m/s and time is days then [dvdt] is m/s/day)
anybasis_params['curv'] = radvel.Parameter(value=0.0) # curvature of slope (i.e. \ddot{\gamma}): (If rv is m/s and time is days then [curv] is m/s/day^2)

# analytically calculate gamma if vary=False and linear=True
anybasis_params['gamma_hires_j'] = radvel.Parameter(value=0.1, vary=True, linear=False) # RV trend for hires_rk

anybasis_params['jit_hires_j'] = radvel.Parameter(value=2.6) # jitter for hires_rk

# Convert input orbital parameters into the fitting basis
params = anybasis_params.basis.to_any_basis(anybasis_params,fitting_basis)

# Set the 'vary' attributes of each of the parameters in the fitting basis. A parameter's 'vary' attribute should
# be set to False if you wish to hold it fixed during the fitting process. By default, all 'vary' parameters
# are set to True.
# params['dvdt'].vary = False
# params['curv'].vary = False
params['per1'].vary = False

# Load radial velocity data,must have 'time', 'mnvel', 'errvel', and 'tel' keys
# the velocities are expected to be in m/s
data = pd.read_csv('lightkurveandexoplanet/k06194_rv_mod_cull.csv')

# Define prior shapes and widths here.
priors = [
    radvel.prior.EccentricityPrior( nplanets ),           # Keeps eccentricity < 1
    radvel.prior.Gaussian('tc1', params['tc1'].value, 300.0),    # Gaussian prior on tc1 with center at tc1 and width 300 days
    radvel.prior.HardBounds('jit_hires_j', 0.0, 10.0),
    radvel.prior.Gaussian('gamma_hires_j', 0.0, 10.0),
    radvel.prior.Gaussian('tc2', params['tc2'].value, 300.0),
    radvel.prior.Gaussian('tc3', params['tc3'].value, 300.0),
]

# optional argument that can contain stellar mass in solar units (mstar) and
# uncertainty (mstar_err). If not set, mstar will be set to nan.
stellar = dict(mstar=1.2295, mstar_err=0.0458)